{"version":3,"sources":["customAxios.js","helpers/groupByFirstChar.js","store/contactsSlice.js","store/index.js","hooks/useColorScheme.ts","constants/Colors.ts","components/Themed.tsx","components/ContactListItem/index.js","components/CustomFAB/index.js","screens/Home.tsx","screens/FormContact.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["instance","axios","create","baseURL","data","groupedArray","_","groupBy","item","firstName","charAt","toUpperCase","sectionedList","Object","entries","key","value","push","list","sort","a","b","nameA","title","nameB","getAllContacts","createAsyncThunk","obj","thunkAPI","async","useTryAsync","result","map","personName","lastName","counterSlice","createSlice","name","initialState","loading","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","groupByFirstChar","configureStore","reducer","contactList","contactsSlice","useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","styles","StyleSheet","center","alignSelf","row","flexDirection","greyBg","MyComponent","colors","useTheme","SectionList","sections","keyExtractor","index","id","renderItem","description","age","left","size","tertiary","source","photo","right","IconButton","icon","primary","onPress","onEditClicked","method","url","then","res","getAllData","renderSectionHeader","section","fab","position","margin","bottom","FAB","console","log","TabOneScreen","navigation","route","params","refreshData","useSelector","allContacts","sectionedContacts","dispatch","useDispatch","useState","searchQuery","setSearchQuery","searchResults","useMemo","filter","RegExp","test","onChangeSearch","useCallback","query","useEffect","container","Searchbar","placeholder","onChangeText","allCenter","ActivityIndicator","animating","ContactListItem","navigate","formType","CustomFAB","flex","paddingHorizontal","paddingTop","paddingBottom","alignItems","justifyContent","fontSize","fontWeight","separator","marginVertical","height","width","onAnyChange","keyObj","setParams","TextInput","label","Icon","keyboardType","maxLength","textContentType","paddingVertical","gap","MonoText","fontFamily","EditScreenInfo","path","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","TouchableOpacity","handleHelpPress","helpLink","helpLinkText","WebBrowser","marginHorizontal","borderRadius","lineHeight","textAlign","marginTop","ModalScreen","StatusBar","Platform","OS","NotFoundScreen","replace","link","linkText","padding","linking","prefixes","Linking","config","screens","Home","FullInfo","parse","Number","FormContact","Modal","NotFound","axiosConf","Create","Edit","Navigation","colorScheme","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","component","options","headerShown","axiosObj","headerLeft","headerRight","response","reset","routes","Group","screenOptions","presentation","secondary","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","FontAwesome","font","require","warn","useCachedResources","store","module","exports"],"mappings":"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","file":"static/js/app.952b0b98.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst instance = axios.create({\n  baseURL: 'https://simple-contact-crud.herokuapp.com/contact'\n});\n\nexport default instance","import _ from \"lodash\"\n\nexport default function (data) {\n  const groupedArray = _.groupBy(data, item => item.firstName.charAt(0).toUpperCase());\n\n  let sectionedList = [];\n  for (const [key, value] of Object.entries(groupedArray)) {\n    sectionedList.push({\n      'title': key,\n      'data': value\n    })\n  }\n  sectionedList = sectionedList.sort((a, b) => {\n    const nameA = a.title; // ignore upper and lowercase\n    const nameB = b.title; // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n  \n    // names must be equal\n    return 0;\n  })\n\n  return {\n    list: data,\n    sectionedList,\n  }\n}","import { createAsyncThunk, createSlice, current } from '@reduxjs/toolkit'\nimport { useTryAsync } from 'no-try'\n\nimport axios from \"../customAxios\"\nimport groupByFirstChar from \"../helpers/groupByFirstChar\"\n\nconst initialState = {\n  list: [],\n  sectionedList: [],\n  loading: 'idle', //'idle' | 'pending' | 'succeeded' | 'failed',\n}\n\nexport const getAllContacts = createAsyncThunk(\n  'contactList/getAllContacts',\n  async (obj, thunkAPI) => {\n    const [error, result] = await useTryAsync(() => axios(obj))\n    \n    const data = result.data.data.map(obj => ({...obj, personName: obj.firstName + ' ' + obj.lastName}))\n    return data\n  }\n)\n\nexport const counterSlice = createSlice({\n  name: 'contactList',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(getAllContacts.pending, (state, action) => {\n      state.loading = 'pending'\n      // state.list = data\n      // state.sectionedList = sectionedList\n    })\n    builder.addCase(getAllContacts.fulfilled, (state, action) => {\n      const data = action.payload\n\n      return {...groupByFirstChar(data), loading: 'succeeded'}\n      // state.list = data\n      // state.sectionedList = sectionedList\n    })\n  },\n})\n\n// Action creators are generated for each case reducer function\n// export const { setLoading } = counterSlice.actions\n\nexport default counterSlice.reducer","import { configureStore } from '@reduxjs/toolkit'\nimport contactsSlice from './contactsSlice'\n\nexport default configureStore({\n  reducer: {\n    contactList: contactsSlice,\n  },\n})","import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\nimport { List, Avatar, IconButton, useTheme } from 'react-native-paper';\nimport { SectionList, View, StyleSheet } from \"react-native\";\nimport axios from \"../../customAxios\"\n\nconst MyComponent = (props) => {\n  const { colors } = useTheme();\n  \n  return (\n    <SectionList\n      sections={props.sections}\n      keyExtractor={(item, index) => item.id}\n      renderItem={({ item }) => <List.Item\n        title={item.personName}\n        description={'Age : ' + item.age}\n        left={() => <Avatar.Image size={36} style={{ alignSelf: 'center', backgroundColor: colors.tertiary }} source={item.photo} />}\n        right={() => (<View style={styles.row}>\n          <IconButton icon=\"square-edit-outline\" color={colors.primary} size={24} style={styles.center} onPress={() => props.onEditClicked(item)} />\n          <IconButton icon=\"delete\" color=\"red\" size={24} style={styles.center} onPress={() => axios({\n            method: 'DELETE',\n            url: '/' + item.id,\n          }).then(res => {\n            props.getAllData()\n            return res\n          })} />\n        </View>)}\n      />}\n      renderSectionHeader={({ section: { title } }) => (\n        <List.Subheader>{title}</List.Subheader>\n      )}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  center: {\n    alignSelf: 'center',\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  greyBg: {\n    backgroundColor: 'grey',\n    alignSelf: 'center',\n  }\n});\n\nexport default MyComponent;","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { FAB, useTheme } from 'react-native-paper';\n\nconst MyComponent = (props) => {\n  const { colors } = useTheme();\n\n  return (\n    <FAB\n      icon=\"plus\"\n      color='white'\n      style={styles.fab}\n      onPress={() => console.log('Pressed')}\n      {...props}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'green'\n  },\n})\n\nexport default MyComponent;","import React, { useState, useEffect, useMemo, useCallback } from 'react'\nimport { StyleSheet } from 'react-native';\nimport { Searchbar, ActivityIndicator, useTheme } from 'react-native-paper';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Text, View } from '../components/Themed';\nimport ContactListItem from '../components/ContactListItem'\nimport CustomFAB from '../components/CustomFAB'\nimport { getAllContacts } from '../store/contactsSlice'\nimport groupByFirstChar from \"../helpers/groupByFirstChar\"\n\nexport default function TabOneScreen({ navigation, route }) {\n  const refreshData = route.params?.refreshData\n  const { colors } = useTheme();\n  const loading = useSelector((state) => state.contactList.loading)\n  const allContacts = useSelector((state) => state.contactList.list)\n  const sectionedContacts = useSelector((state) => state.contactList.sectionedList)\n  const dispatch = useDispatch()\n\n  const getAllData = () => dispatch(getAllContacts())\n\n  const [searchQuery, setSearchQuery] = useState('');\n  const searchResults = useMemo(() => searchQuery && groupByFirstChar(allContacts.filter((obj: any) => {\n    const regexSearch = new RegExp(searchQuery, 'gi')\n    const foundMatch = regexSearch.test(obj.personName)\n    return foundMatch\n  })).sectionedList, [searchQuery])\n\n  const onChangeSearch = useCallback(query => setSearchQuery(query), []);\n\n  const addContact = () => navigation.navigate('FormContact', { formType: 'Create', });\n  const onEditClicked = (item: any) => navigation.navigate('FormContact', { ...item, formType: 'Edit', });\n\n  useEffect(() => {\n    getAllData()\n  }, [])\n\n  // useEffect(() => {\n  //   if (refreshData)\n  //     getAllData()\n  // }, [refreshData])\n\n  return (\n    <View style={styles.container}>\n      <Searchbar\n        placeholder=\"Search\"\n        onChangeText={onChangeSearch}\n        value={searchQuery}\n      />\n      {loading === 'pending'\n        ? (<View style={styles.allCenter}>\n          <ActivityIndicator animating={true} color={colors.primary} />\n        </View>)\n        : <ContactListItem getAllData={getAllData} sections={searchResults || sectionedContacts} onEditClicked={onEditClicked} />}\n      <CustomFAB onPress={addContact} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: \"row\",\n    // width: '100%',\n  },\n  container: {\n    flex: 1,\n    // alignItems: 'center',\n    // justifyContent: 'center',\n    paddingHorizontal: 20,\n    paddingTop: 20,\n    paddingBottom: 70,\n  },\n  allCenter: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import React, { useState, useEffect, useMemo, useCallback } from 'react'\nimport { StyleSheet } from 'react-native';\nimport { TextInput, IconButton, useTheme } from 'react-native-paper';\n\nimport { Text, View } from '../components/Themed';\nimport useDidUpdateEffect from '../helpers/useDidUpdateEffect';\nimport axios from \"../customAxios\"\n\nexport default function TabOneScreen({ route, navigation }: any) {\n  // const { colors } = useTheme();\n  const { formType, /* axiosObj, */ personName, id, ...item } = route.params;\n\n  // const [formData, setformData] = useState(item || {})\n  // const [dataChanged, setdataChanged] = useState(false)\n  // const [allDoneFilled, setallDoneFilled] = useState(false)\n\n  const onAnyChange = keyObj => value => {\n    // console.log(keyObj, value)\n    navigation.setParams({ ...item, [keyObj]: value })\n  }\n  // const onAnyChange = keyObj => value => {\n  //   // console.log(keyObj, value)\n  //   setformData(prevVal => ({ ...prevVal, [keyObj]: value }))\n  // }\n\n// useDidUpdateEffect(() => {\n//   // console.log(formData)\n//   if (!dataChanged) {\n//     setdataChanged(true)\n//     navigation.setOptions({\n//       headerRight: () => (\n//         <IconButton icon=\"check\" color={colors.primary} size={24} onPress={() => {\n//           if (!allDoneFilled)\n//             setallDoneFilled(true)\n//         }} />\n//       )\n//     })\n//   }\n// }, [formData])\n\n// useEffect(() => {\n//   if (allDoneFilled) {\n//     console.log(axiosObj)\n//     console.log(formData)\n//     axios({ ...axiosObj, data: formData })\n//       .then(response => {\n//         console.log(response.data);\n//         console.log(response.status);\n//         console.log(response.statusText);\n//         console.log(response.headers);\n//         console.log(response.config);\n//         navigation.goBack()\n//         return response\n//       })\n//   }\n// }, [allDoneFilled])\n\nreturn (\n  <View style={styles.container}>\n    {/* <Text style={styles.title}>{`${formType} Contact`}</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> */}\n    <TextInput\n      label=\"First Name\"\n      value={item.firstName}\n      onChangeText={onAnyChange('firstName')}\n      left={<TextInput.Icon name=\"alphabetical\" />}\n    />\n    <TextInput\n      label=\"Last Name\"\n      value={item.lastName}\n      onChangeText={onAnyChange('lastName')}\n      left={<TextInput.Icon name=\"alphabetical\" />}\n    />\n    <TextInput\n      label=\"Age\"\n      value={item.age}\n      onChangeText={onAnyChange('age')}\n      keyboardType=\"phone-pad\"\n      left={<TextInput.Icon name=\"numeric\" />}\n      maxLength={3}\n    />\n    <TextInput\n      label=\"Photo (URL)\"\n      value={item.photo}\n      onChangeText={onAnyChange('photo')}\n      left={<TextInput.Icon name=\"web\" />}\n      textContentType=\"URL\"\n    />\n  </View>\n);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    // justifyContent: 'center',\n    paddingVertical: 30,\n    gap: 10,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import { StatusBar } from 'expo-status-bar';\nimport { Platform, StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function ModalScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Modal</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/ModalScreen.tsx\" />\n\n      {/* Use a light status bar on iOS to account for the black space above the modal */}\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport { Text, View } from '../components/Themed';\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Home: 'home',\n      FullInfo: {\n        path: 'contact/:id',\n        parse: {\n          id: Number,\n        },\n      },\n      FormContact: {\n        path: 'formcontact/:id',\n        // parse: {\n        //   id: Number,\n        // },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { ColorSchemeName, Pressable } from 'react-native';\nimport { IconButton, useTheme } from 'react-native-paper';\n\nimport Home from '../screens/Home';\nimport FullInfo from '../screens/FullInfo';\nimport FormContact from '../screens/FormContact';\nimport ModalScreen from '../screens/ModalScreen';\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList, RootTabParamList, RootTabScreenProps } from '../types';\nimport LinkingConfiguration from './LinkingConfiguration';\nimport axios from \"../customAxios\"\n\nconst axiosConf: any = {\n  Create: () => ({\n    method: 'POST',\n  }),\n  Edit: (id: any) => ({ \n    method: 'PUT', \n    url: '/' + id \n  }),\n}\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  const { colors } = useTheme();\n\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Home\" component={Home} options={{ headerShown: false }} />\n      {/* <Stack.Screen name=\"FullInfo\" component={FullInfo} options={{ headerShown: false }} /> */}\n      <Stack.Screen name=\"FormContact\" component={FormContact} options={({ navigation, route }: any) => {\n        const { formType, axiosObj, personName, id, ...item } = route.params;\n\n        return ({\n        title: `${formType} Contact`,\n        headerLeft: () => (\n          <IconButton icon=\"close\" size={24} onPress={() => navigation.navigate('Home')} />\n        ),\n        ...item && { headerRight: () => (\n          <IconButton icon=\"check\" color={colors.primary} size={24} onPress={() => axios({ ...axiosConf[formType](id), data: item })\n          .then(response => {\n            // console.log(response.data);\n            // console.log(response.status);\n            // console.log(response.statusText);\n            // console.log(response.headers);\n            // console.log(response.config);\n            // navigation.navigate('Home', { refreshData: true })\n            navigation.reset({\n              index: 0,\n              routes: [{ name: 'Home' }],\n            });\n            return response\n          })} />\n        ) }\n      })\n      }} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}","import { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { DefaultTheme, Provider as PaperProvider } from 'react-native-paper';\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nconst theme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#3498db',\n    secondary: '#f1c40f',\n    tertiary: '#a1b2c3'\n  },\n};\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n        <PaperProvider theme={theme}>\n          <SafeAreaProvider>\n            <Navigation colorScheme={colorScheme} />\n            <StatusBar />\n          </SafeAreaProvider>\n        </PaperProvider>\n      </Provider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}